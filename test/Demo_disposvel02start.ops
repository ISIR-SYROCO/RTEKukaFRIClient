//importation des librairies necessaires
import("rtt_rosnode")
import("tf_reader")
import("disposvel")
import("lwr_fri")
import("kuka_send_joint_positions")
import("directKinematics")
import("tfRobotSubscriber")

//construstion des composants
loadComponent("tf","tf_reader::Tf_reader")
loadComponent("getDistances","Disposvel")
loadComponent("component_send", "Kuka_send_joint_positions")
loadComponent("lwr","lwr_fri::FRIComponent")
loadComponent("RobotState","DirectKinematics")
loadComponent("tfSub","TfRobotSubscriber")


setActivity("lwr",0, 99, ORO_SCHED_RT)

//se connecter au topic tf de ROS
stream("tf.tf_in",ros.topic("/tf"))

connectPeers("getDistances","tf")
connectServices("getDistances","tf")
getDistances.number_of_robot_frames = 7
getDistances.number_of_human_frames = 8
//7
getDistances.number_of_robot_links = 3
getDistances.number_of_human_limbes = 7
tf.configure
tf.start

lwr.udp_port=49938
lwr.configure

RobotState.setPeriod(0.01)
RobotState.configure()

tfSub.setPeriod(0.05)
tfSub.configure()

var ConnPolicy cp
cp.type = DATA
//cp.size = 10
cp.lock_policy = LOCKED
connect("lwr.JointState","RobotState.inJointState",cp)

var ConnPolicy cp_1
cp_1.type = DATA
//cp_1.size = 10
cp_1.lock_policy = LOCKED
connect("RobotState.sortie","tfSub.inCartesianState",cp_1)

var ConnPolicy cp_2
cp_2.type = DATA
//cp_1.size = 10
cp_2.lock_policy = LOCKED
connect("RobotState.sizeChain","tfSub.size",cp_2)

lwr.start
RobotState.start()
tfSub.start()

getDistances.configure
getDistances.setPeriod(0.02)

connect("lwr.JointState", "component_send.jointState", cp)
connect("lwr.JointVelocityCommand", "component_send.jointVelocitiesCommand", cp)
connect("lwr.toKRL", "component_send.toKRL", cp)
connect("component_send.distance", "getDistances.distance", cp)

stream("getDistances.nav_path", ros.topic("/distances/path"))

component_send.configure
component_send.setPeriod(0.02)

getDistances.start
component_send.start











